{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMfv/Kg68ydP6svSr715Oro"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"IkFf50aHFtG7"},"source":["## Оптимизация выполнения кода, векторизация, Numba"]},{"cell_type":"markdown","metadata":{"id":"VMbY-yBTFtHC"},"source":["Материалы:\n","* Макрушин С.В. Лекция 3: Оптимизация выполнения кода, векторизация, Numba\n","* IPython Cookbook, Second Edition (2018), глава 4\n","* https://numba.pydata.org/numba-doc/latest/user/5minguide.html"]},{"cell_type":"markdown","metadata":{"id":"jEf2G9PqFtHD"},"source":["## Задачи для совместного разбора"]},{"cell_type":"markdown","metadata":{"id":"4UCJvdbaFtHE"},"source":["1. Сгенерируйте массив `A` из `N=1млн` случайных целых чисел на отрезке от 0 до 1000. Пусть `B[i] = A[i] + 100`. Посчитайте среднее значение массива `B`."]},{"cell_type":"code","source":["N = 10**6; N"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"H8X76hbk_ecD","executionInfo":{"status":"ok","timestamp":1671636853736,"user_tz":-180,"elapsed":23,"user":{"displayName":"Настя Конева","userId":"03720402027676844470"}},"outputId":"727ada22-edbe-4f33-9640-00cee19250c3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1000000"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["A = np.random.randint(1,1000, size = N)\n","A"],"metadata":{"id":"LZ9EFPhfaiZp","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671636890142,"user_tz":-180,"elapsed":4,"user":{"displayName":"Настя Конева","userId":"03720402027676844470"}},"outputId":"517e79a9-048a-4a6a-c3c3-4e8728d80106"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([686, 127, 807, ..., 844, 688, 451])"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["%%time\n","\n","B = np.array([0 for i in range(1000000)])\n","for i in range(len(A)):\n","  B[i] = A[i] + 100\n","\n","B.mean()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wPWzjaBPkWtD","executionInfo":{"status":"ok","timestamp":1671636909545,"user_tz":-180,"elapsed":1427,"user":{"displayName":"Настя Конева","userId":"03720402027676844470"}},"outputId":"5d4d83ab-c7e1-43a5-c10e-d91cedfbf258"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["CPU times: user 596 ms, sys: 8.7 ms, total: 605 ms\n","Wall time: 608 ms\n"]},{"output_type":"execute_result","data":{"text/plain":["600.474247"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["def f1(A):\n","  acc,cnt=0,0\n","  for ai in A:\n","    bi=ai+100\n","    acc+=bi\n","    cnt+=1\n","  return acc/cnt"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"t_uKzvVVkWpk","executionInfo":{"status":"ok","timestamp":1671636913363,"user_tz":-180,"elapsed":573,"user":{"displayName":"Настя Конева","userId":"03720402027676844470"}},"outputId":"36e8737d-0227-47fb-f062-7b971433dc06"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["CPU times: user 404 ms, sys: 0 ns, total: 404 ms\n","Wall time: 409 ms\n"]},{"output_type":"execute_result","data":{"text/plain":["600.474247"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["%timeit f1(A)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mlyiipo5kWne","executionInfo":{"status":"ok","timestamp":1671637185560,"user_tz":-180,"elapsed":3807,"user":{"displayName":"Настя Конева","userId":"03720402027676844470"}},"outputId":"63a10177-b404-481a-fd5b-a78fe27b5d38"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["403 ms ± 5.7 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n"]}]},{"cell_type":"code","source":["def f2(A):\n","  acc=0\n","  for ai in A:\n","    bi=ai+100\n","    acc+=bi\n","  return acc/len(A)\n"," "],"metadata":{"id":"En_4pk69VztY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["%timeit f2(A)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JpylSyiGVzpz","executionInfo":{"status":"ok","timestamp":1671637251677,"user_tz":-180,"elapsed":2897,"user":{"displayName":"Настя Конева","userId":"03720402027676844470"}},"outputId":"933bf4e7-0dcc-44c6-f13d-57b44ab76eb1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["326 ms ± 23.1 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n"]}]},{"cell_type":"code","source":["def f3(A):\n","  acc=0\n","  for ai in A:\n","    acc+=ai\n","  return acc/len(A)+100"],"metadata":{"id":"BbbS_2dEVzn0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["%timeit f3(A)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DpboTxnSWLf0","executionInfo":{"status":"ok","timestamp":1671637309937,"user_tz":-180,"elapsed":11352,"user":{"displayName":"Настя Конева","userId":"03720402027676844470"}},"outputId":"e3ec9461-94d1-4814-c6f6-0dc645b8d745"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["122 ms ± 6.53 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\n"]}]},{"cell_type":"code","source":["A+100"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wMJcgr6pWW9r","executionInfo":{"status":"ok","timestamp":1671637352467,"user_tz":-180,"elapsed":2,"user":{"displayName":"Настя Конева","userId":"03720402027676844470"}},"outputId":"85ac583a-3c81-4993-ab6e-4e016881ba13"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([786, 227, 907, ..., 944, 788, 551])"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["def f4(A):\n","  return (A+100).mean()"],"metadata":{"id":"iK0UcUaAWPpk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["%timeit f4(A)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7K9pnrpGWPj0","executionInfo":{"status":"ok","timestamp":1671637385804,"user_tz":-180,"elapsed":2201,"user":{"displayName":"Настя Конева","userId":"03720402027676844470"}},"outputId":"da1c4b52-2af3-41f3-f379-0b951661c2bb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2.69 ms ± 51.4 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n"]}]},{"cell_type":"markdown","metadata":{"id":"iIZ4yzL5FtHF"},"source":["2. Создайте таблицу 2млн строк и с 4 столбцами, заполненными случайными числами. Добавьте столбец `key`, которые содержит элементы из множества английских букв. Выберите из таблицы подмножество строк, для которых в столбце `key` указаны первые 5 английских букв."]},{"cell_type":"code","source":["import numpy as np"],"metadata":{"id":"SHcwG1mGa9Hd"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["massiv = np.random.random((2*10**6, 4))\n","massiv"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tRpHPOPNbDJ9","executionInfo":{"status":"ok","timestamp":1671625792706,"user_tz":-180,"elapsed":572,"user":{"displayName":"Настя Конева","userId":"03720402027676844470"}},"outputId":"fade05dd-b326-45f3-a92f-2878f6d5db2b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0.44202492, 0.41307269, 0.12951073, 0.05519068],\n","       [0.16522044, 0.88712378, 0.11903153, 0.17216612],\n","       [0.97745937, 0.6340491 , 0.94893065, 0.51070893],\n","       ...,\n","       [0.11623574, 0.13298403, 0.25817036, 0.20171173],\n","       [0.47175095, 0.73223252, 0.7806654 , 0.70639276],\n","       [0.07048237, 0.37267423, 0.66021217, 0.0767009 ]])"]},"metadata":{},"execution_count":64}]},{"cell_type":"code","source":["data = pd.DataFrame(massiv, columns = [1,2,3,4])\n","data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"BkiM7v1ia1TQ","executionInfo":{"status":"ok","timestamp":1671625793300,"user_tz":-180,"elapsed":9,"user":{"displayName":"Настя Конева","userId":"03720402027676844470"}},"outputId":"f257385c-18af-4f19-a9df-5a9c4eb70421"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                1         2         3         4\n","0        0.442025  0.413073  0.129511  0.055191\n","1        0.165220  0.887124  0.119032  0.172166\n","2        0.977459  0.634049  0.948931  0.510709\n","3        0.710432  0.676128  0.478999  0.718463\n","4        0.561141  0.267404  0.954984  0.430117\n","...           ...       ...       ...       ...\n","1999995  0.752427  0.676111  0.364379  0.034014\n","1999996  0.723881  0.054570  0.102145  0.435520\n","1999997  0.116236  0.132984  0.258170  0.201712\n","1999998  0.471751  0.732233  0.780665  0.706393\n","1999999  0.070482  0.372674  0.660212  0.076701\n","\n","[2000000 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-a84f1da1-9887-4190-8825-1d58b0e770ec\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.442025</td>\n","      <td>0.413073</td>\n","      <td>0.129511</td>\n","      <td>0.055191</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.165220</td>\n","      <td>0.887124</td>\n","      <td>0.119032</td>\n","      <td>0.172166</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.977459</td>\n","      <td>0.634049</td>\n","      <td>0.948931</td>\n","      <td>0.510709</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.710432</td>\n","      <td>0.676128</td>\n","      <td>0.478999</td>\n","      <td>0.718463</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.561141</td>\n","      <td>0.267404</td>\n","      <td>0.954984</td>\n","      <td>0.430117</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1999995</th>\n","      <td>0.752427</td>\n","      <td>0.676111</td>\n","      <td>0.364379</td>\n","      <td>0.034014</td>\n","    </tr>\n","    <tr>\n","      <th>1999996</th>\n","      <td>0.723881</td>\n","      <td>0.054570</td>\n","      <td>0.102145</td>\n","      <td>0.435520</td>\n","    </tr>\n","    <tr>\n","      <th>1999997</th>\n","      <td>0.116236</td>\n","      <td>0.132984</td>\n","      <td>0.258170</td>\n","      <td>0.201712</td>\n","    </tr>\n","    <tr>\n","      <th>1999998</th>\n","      <td>0.471751</td>\n","      <td>0.732233</td>\n","      <td>0.780665</td>\n","      <td>0.706393</td>\n","    </tr>\n","    <tr>\n","      <th>1999999</th>\n","      <td>0.070482</td>\n","      <td>0.372674</td>\n","      <td>0.660212</td>\n","      <td>0.076701</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>2000000 rows × 4 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a84f1da1-9887-4190-8825-1d58b0e770ec')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-a84f1da1-9887-4190-8825-1d58b0e770ec button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-a84f1da1-9887-4190-8825-1d58b0e770ec');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":65}]},{"cell_type":"code","source":["ord('a'), ord('z')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ww82oOmucLfV","executionInfo":{"status":"ok","timestamp":1671625794339,"user_tz":-180,"elapsed":6,"user":{"displayName":"Настя Конева","userId":"03720402027676844470"}},"outputId":"d5a131f7-b920-4e9a-fc79-fe49a2772340"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(97, 122)"]},"metadata":{},"execution_count":66}]},{"cell_type":"code","source":["key = [chr(i) for i in range(ord('a'), ord('z')+1) ] \n","kk = np.random.choice(key, 2000000)\n","len(kk)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VXC8N6vOdLYL","executionInfo":{"status":"ok","timestamp":1671625795776,"user_tz":-180,"elapsed":6,"user":{"displayName":"Настя Конева","userId":"03720402027676844470"}},"outputId":"8243fb7a-bc3b-47d0-e687-59bd871df670"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2000000"]},"metadata":{},"execution_count":67}]},{"cell_type":"code","source":["data['key'] = kk\n","data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"3ffbXbNva1P1","executionInfo":{"status":"ok","timestamp":1671625796207,"user_tz":-180,"elapsed":8,"user":{"displayName":"Настя Конева","userId":"03720402027676844470"}},"outputId":"b0e76ccb-eaf0-4fef-ced5-073af11bf7a7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                1         2         3         4 key\n","0        0.442025  0.413073  0.129511  0.055191   v\n","1        0.165220  0.887124  0.119032  0.172166   l\n","2        0.977459  0.634049  0.948931  0.510709   e\n","3        0.710432  0.676128  0.478999  0.718463   z\n","4        0.561141  0.267404  0.954984  0.430117   j\n","...           ...       ...       ...       ...  ..\n","1999995  0.752427  0.676111  0.364379  0.034014   w\n","1999996  0.723881  0.054570  0.102145  0.435520   b\n","1999997  0.116236  0.132984  0.258170  0.201712   t\n","1999998  0.471751  0.732233  0.780665  0.706393   l\n","1999999  0.070482  0.372674  0.660212  0.076701   w\n","\n","[2000000 rows x 5 columns]"],"text/html":["\n","  <div id=\"df-4720c4df-1d17-472c-b3de-c90f27929249\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>key</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.442025</td>\n","      <td>0.413073</td>\n","      <td>0.129511</td>\n","      <td>0.055191</td>\n","      <td>v</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.165220</td>\n","      <td>0.887124</td>\n","      <td>0.119032</td>\n","      <td>0.172166</td>\n","      <td>l</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.977459</td>\n","      <td>0.634049</td>\n","      <td>0.948931</td>\n","      <td>0.510709</td>\n","      <td>e</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.710432</td>\n","      <td>0.676128</td>\n","      <td>0.478999</td>\n","      <td>0.718463</td>\n","      <td>z</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.561141</td>\n","      <td>0.267404</td>\n","      <td>0.954984</td>\n","      <td>0.430117</td>\n","      <td>j</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1999995</th>\n","      <td>0.752427</td>\n","      <td>0.676111</td>\n","      <td>0.364379</td>\n","      <td>0.034014</td>\n","      <td>w</td>\n","    </tr>\n","    <tr>\n","      <th>1999996</th>\n","      <td>0.723881</td>\n","      <td>0.054570</td>\n","      <td>0.102145</td>\n","      <td>0.435520</td>\n","      <td>b</td>\n","    </tr>\n","    <tr>\n","      <th>1999997</th>\n","      <td>0.116236</td>\n","      <td>0.132984</td>\n","      <td>0.258170</td>\n","      <td>0.201712</td>\n","      <td>t</td>\n","    </tr>\n","    <tr>\n","      <th>1999998</th>\n","      <td>0.471751</td>\n","      <td>0.732233</td>\n","      <td>0.780665</td>\n","      <td>0.706393</td>\n","      <td>l</td>\n","    </tr>\n","    <tr>\n","      <th>1999999</th>\n","      <td>0.070482</td>\n","      <td>0.372674</td>\n","      <td>0.660212</td>\n","      <td>0.076701</td>\n","      <td>w</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>2000000 rows × 5 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4720c4df-1d17-472c-b3de-c90f27929249')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-4720c4df-1d17-472c-b3de-c90f27929249 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-4720c4df-1d17-472c-b3de-c90f27929249');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":68}]},{"cell_type":"code","source":["%%time\n","data[data['key'].isin({\"a\", \"b\", \"c\", \"d\", \"e\"})]"],"metadata":{"id":"XGyLflkmd4Os","colab":{"base_uri":"https://localhost:8080/","height":460},"executionInfo":{"status":"ok","timestamp":1671625808797,"user_tz":-180,"elapsed":355,"user":{"displayName":"Настя Конева","userId":"03720402027676844470"}},"outputId":"22af32e4-3d3d-4788-8d96-0e8cc68c36b1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["CPU times: user 168 ms, sys: 6.81 ms, total: 175 ms\n","Wall time: 175 ms\n"]},{"output_type":"execute_result","data":{"text/plain":["                1         2         3         4 key\n","2        0.977459  0.634049  0.948931  0.510709   e\n","9        0.114077  0.827896  0.586118  0.780319   e\n","10       0.829401  0.015239  0.917421  0.023092   b\n","11       0.838450  0.562159  0.940000  0.051246   e\n","12       0.782981  0.662239  0.217699  0.855749   d\n","...           ...       ...       ...       ...  ..\n","1999975  0.506332  0.843646  0.166985  0.046963   b\n","1999976  0.198814  0.275515  0.794594  0.334566   e\n","1999978  0.641919  0.522433  0.943238  0.863205   b\n","1999988  0.145716  0.344647  0.227438  0.731175   d\n","1999996  0.723881  0.054570  0.102145  0.435520   b\n","\n","[385182 rows x 5 columns]"],"text/html":["\n","  <div id=\"df-07d493ea-b81e-4b08-9ff6-a13db75c29c0\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>key</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2</th>\n","      <td>0.977459</td>\n","      <td>0.634049</td>\n","      <td>0.948931</td>\n","      <td>0.510709</td>\n","      <td>e</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>0.114077</td>\n","      <td>0.827896</td>\n","      <td>0.586118</td>\n","      <td>0.780319</td>\n","      <td>e</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>0.829401</td>\n","      <td>0.015239</td>\n","      <td>0.917421</td>\n","      <td>0.023092</td>\n","      <td>b</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>0.838450</td>\n","      <td>0.562159</td>\n","      <td>0.940000</td>\n","      <td>0.051246</td>\n","      <td>e</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>0.782981</td>\n","      <td>0.662239</td>\n","      <td>0.217699</td>\n","      <td>0.855749</td>\n","      <td>d</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1999975</th>\n","      <td>0.506332</td>\n","      <td>0.843646</td>\n","      <td>0.166985</td>\n","      <td>0.046963</td>\n","      <td>b</td>\n","    </tr>\n","    <tr>\n","      <th>1999976</th>\n","      <td>0.198814</td>\n","      <td>0.275515</td>\n","      <td>0.794594</td>\n","      <td>0.334566</td>\n","      <td>e</td>\n","    </tr>\n","    <tr>\n","      <th>1999978</th>\n","      <td>0.641919</td>\n","      <td>0.522433</td>\n","      <td>0.943238</td>\n","      <td>0.863205</td>\n","      <td>b</td>\n","    </tr>\n","    <tr>\n","      <th>1999988</th>\n","      <td>0.145716</td>\n","      <td>0.344647</td>\n","      <td>0.227438</td>\n","      <td>0.731175</td>\n","      <td>d</td>\n","    </tr>\n","    <tr>\n","      <th>1999996</th>\n","      <td>0.723881</td>\n","      <td>0.054570</td>\n","      <td>0.102145</td>\n","      <td>0.435520</td>\n","      <td>b</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>385182 rows × 5 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-07d493ea-b81e-4b08-9ff6-a13db75c29c0')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-07d493ea-b81e-4b08-9ff6-a13db75c29c0 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-07d493ea-b81e-4b08-9ff6-a13db75c29c0');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":70}]},{"cell_type":"code","source":[],"metadata":{"id":"7a7p4DFLFmyf"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XUNkgRdaFtHG"},"source":["## Лабораторная работа 3"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BiBUWp5QFtHG","executionInfo":{"status":"ok","timestamp":1671613950116,"user_tz":-180,"elapsed":5443,"user":{"displayName":"Валерия Южева","userId":"02946108047994320757"}},"outputId":"10a6609e-c10b-4b1f-cf3a-194c97f508bc"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting line_profiler\n","  Downloading line_profiler-4.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (673 kB)\n","\u001b[K     |████████████████████████████████| 673 kB 4.9 MB/s \n","\u001b[?25hInstalling collected packages: line-profiler\n","Successfully installed line-profiler-4.0.2\n"]}],"source":["!pip install line_profiler"]},{"cell_type":"code","source":["%load_ext line_profiler"],"metadata":{"id":"9u4RU7IZ9LFH"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0BetvSZpFtHJ"},"source":["1. В файлах `recipes_sample.csv` и `reviews_sample.csv` (__ЛР 2__) находится информация об рецептах блюд и отзывах на эти рецепты соответственно. Загрузите данные из файлов в виде `pd.DataFrame` с названиями `recipes` и `reviews`. Обратите внимание на корректное считывание столбца(ов) с индексами. Приведите столбцы к нужным типам.\n","\n","Реализуйте несколько вариантов функции подсчета среднего значения столбца `rating` из таблицы `reviews` для отзывов, оставленных в 2010 году.\n","\n","A. С использованием метода `DataFrame.iterrows` исходной таблицы;\n","\n","Б. С использованием метода `DataFrame.iterrows` таблицы, в которой сохранены только отзывы за 2010 год;\n","\n","В. С использованием метода `Series.mean`.\n","\n","Проверьте, что результаты работы всех написанных функций корректны и совпадают. Измерьте выполнения всех написанных функций.\n"]},{"cell_type":"code","source":["from google.colab import files\n","uploaded = files.upload()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":108},"id":"VSgZbFCq4E45","executionInfo":{"status":"ok","timestamp":1671613309854,"user_tz":-180,"elapsed":630996,"user":{"displayName":"Валерия Южева","userId":"02946108047994320757"}},"outputId":"798db008-99e0-44e1-8f39-638f37978469"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-ed0c51bf-2d69-4bd8-9976-84a51cf762e8\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-ed0c51bf-2d69-4bd8-9976-84a51cf762e8\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving reviews_sample.csv to reviews_sample.csv\n","Saving recipes_sample.csv to recipes_sample.csv\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","\n","recipes = pd.read_csv('recipes_sample.csv', parse_dates=['submitted'])\n","cols = pd.read_csv('reviews_sample.csv', nrows=0).columns\n","reviews = pd.read_csv('reviews_sample.csv', usecols=cols.tolist()[1:], parse_dates=['date'])\n","reviews.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"DHcOzC1k4EJa","executionInfo":{"status":"ok","timestamp":1671613967120,"user_tz":-180,"elapsed":1210,"user":{"displayName":"Валерия Южева","userId":"02946108047994320757"}},"outputId":"74901202-9050-47f2-fec9-ec4dbe9c96a4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      user_id  recipe_id       date  rating  \\\n","0       21752      57993 2003-05-01       5   \n","1      431813     142201 2007-09-16       5   \n","2      400708     252013 2008-01-10       4   \n","3  2001852463     404716 2017-12-11       5   \n","4       95810     129396 2008-03-14       5   \n","\n","                                              review  \n","0  Last week whole sides of frozen salmon fillet ...  \n","1  So simple and so tasty!  I used a yellow capsi...  \n","2  Very nice breakfast HH, easy to make and yummy...  \n","3  These are a favorite for the holidays and so e...  \n","4  Excellent soup!  The tomato flavor is just gre...  "],"text/html":["\n","  <div id=\"df-bfbf1759-d2c5-4500-bc0e-6304472b4b2c\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user_id</th>\n","      <th>recipe_id</th>\n","      <th>date</th>\n","      <th>rating</th>\n","      <th>review</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>21752</td>\n","      <td>57993</td>\n","      <td>2003-05-01</td>\n","      <td>5</td>\n","      <td>Last week whole sides of frozen salmon fillet ...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>431813</td>\n","      <td>142201</td>\n","      <td>2007-09-16</td>\n","      <td>5</td>\n","      <td>So simple and so tasty!  I used a yellow capsi...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>400708</td>\n","      <td>252013</td>\n","      <td>2008-01-10</td>\n","      <td>4</td>\n","      <td>Very nice breakfast HH, easy to make and yummy...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2001852463</td>\n","      <td>404716</td>\n","      <td>2017-12-11</td>\n","      <td>5</td>\n","      <td>These are a favorite for the holidays and so e...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>95810</td>\n","      <td>129396</td>\n","      <td>2008-03-14</td>\n","      <td>5</td>\n","      <td>Excellent soup!  The tomato flavor is just gre...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bfbf1759-d2c5-4500-bc0e-6304472b4b2c')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-bfbf1759-d2c5-4500-bc0e-6304472b4b2c button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-bfbf1759-d2c5-4500-bc0e-6304472b4b2c');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["#A\n","def sr1(df):\n","    s = []\n","    for index, row in df.iterrows():\n","        s.append(row['rating'])\n","    return(sum(s) / len(s))\n","\n","%timeit sr1(reviews)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kAcb-xYV9DQS","executionInfo":{"status":"ok","timestamp":1671614273007,"user_tz":-180,"elapsed":46934,"user":{"displayName":"Валерия Южева","userId":"02946108047994320757"}},"outputId":"3263032b-9adf-41e6-9e6b-ae13b07112d0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["5.7 s ± 56.6 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n"]}]},{"cell_type":"code","source":["#Б\n","def sr2(df):\n","    s = []\n","    for index, row in df.iterrows():\n","        s.append(row['rating'])\n","    return(sum(s) / len(s))\n","\n","dff = reviews[(reviews.date <= '2010-12-31') & (reviews.date >= '2010-01-01')]\n","%timeit sr2(dff)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hey6OThr9C6v","executionInfo":{"status":"ok","timestamp":1671614292349,"user_tz":-180,"elapsed":4809,"user":{"displayName":"Валерия Южева","userId":"02946108047994320757"}},"outputId":"e4e729d9-bb1f-4ac9-911b-717251e34840"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["548 ms ± 6.3 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n"]}]},{"cell_type":"code","source":["#B\n","def sr3(df):\n","    return(df.mean())\n","\n","%timeit sr3(reviews.rating)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"espmXYF99z6o","executionInfo":{"status":"ok","timestamp":1671614294217,"user_tz":-180,"elapsed":1895,"user":{"displayName":"Валерия Южева","userId":"02946108047994320757"}},"outputId":"782a018a-961a-49ad-e4d9-ae2bab6a1e47"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["246 µs ± 15.9 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\n"]}]},{"cell_type":"markdown","metadata":{"id":"cALEbXRoFtHK"},"source":["2. Какая из созданных функций выполняется медленнее? Что наиболее сильно влияет на скорость выполнения? Для ответа использовать профайлер `line_profiler`. Сохраните результаты работы профайлера в отдельную текстовую ячейку и прокомментируйте результаты его работы.\n","\n","(*). Сможете ли вы ускорить работу функции 1Б, отказавшись от использования метода `iterrows`, но не используя метод `mean`?"]},{"cell_type":"code","source":["%lprun -f sr1 sr1(reviews)"],"metadata":{"id":"q43-FEPd-IAB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Timer unit: 1e-07 s\n","\n","# Total time: 65.0682 s\n","# File: <ipython-input-30-f66b2ab2c9c5>\n","# Function: sr1 at line 2\n","\n","# Line #      Hits         Time  Per Hit   % Time  Line Contents\n","# ==============================================================\n","#      2                                           def sr1(df):\n","#      3         1         25.0     25.0      0.0      s = []\n","#      4    126697  578469798.0   4565.8     88.9      for index, row in df.iterrows():\n","#      5    126696   72188869.0    569.8     11.1          s.append(row['rating'])\n","#      6         1      23399.0  23399.0      0.0      return(sum(s) / len(s))"],"metadata":{"id":"hdVGbyIl_Aey"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Больше всего времени занимает цикл .iterrows().\n","# Добавление в список имеет тоже небольшой вес времени"],"metadata":{"id":"q7TFSSLa-H8r"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#(*)\n","def sr2_new(df):\n","    return(sum(df) / len(df))\n","\n","dff_new = reviews[(reviews.date <= '2010-12-31') & (reviews.date >= '2010-01-01')]\n","%timeit sr2_new(dff_new.rating)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"M0seoXRI-H51","executionInfo":{"status":"ok","timestamp":1671614475633,"user_tz":-180,"elapsed":8620,"user":{"displayName":"Валерия Южева","userId":"02946108047994320757"}},"outputId":"3c00eced-3467-4909-9bcc-0a9970c6b7e6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["938 µs ± 11.8 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\n"]}]},{"cell_type":"markdown","metadata":{"id":"JKTragi4FtHM"},"source":["3. Вам предлагается воспользоваться функцией, которая собирает статистику о том, сколько отзывов содержат то или иное слово. Измерьте время выполнения этой функции. Сможете ли вы найти узкие места в коде, используя профайлер? Выпишите (словами), что в имеющемся коде реализовано неоптимально. Оптимизируйте функцию и добейтесь значительного (как минимум, на один порядок) прироста в скорости выполнения."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mJ1nVQL1FtHN"},"outputs":[],"source":["def get_word_reviews_count(df):\n","    word_reviews = {}\n","    for _, row in df.dropna(subset=['review']).iterrows():\n","        recipe_id, review = row['recipe_id'], row['review']\n","        words = review.split(' ')\n","        for word in words:\n","            if word not in word_reviews:\n","                word_reviews[word] = []\n","            word_reviews[word].append(recipe_id)\n","    \n","    word_reviews_count = {}\n","    for _, row in df.dropna(subset=['review']).iterrows():\n","        review = row['review']\n","        words = review.split(' ')\n","        for word in words:\n","            word_reviews_count[word] = len(word_reviews[word])\n","    return word_reviews_count"]},{"cell_type":"code","source":["%timeit get_word_reviews_count(reviews)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9ASWydg5_TWk","executionInfo":{"status":"ok","timestamp":1671614683300,"user_tz":-180,"elapsed":167504,"user":{"displayName":"Валерия Южева","userId":"02946108047994320757"}},"outputId":"f1d324ae-d3b2-47df-c374-858d39031495"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["20.8 s ± 333 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n"]}]},{"cell_type":"code","source":["%lprun -f get_word_reviews_count get_word_reviews_count(reviews)"],"metadata":{"id":"7-lOgOma_VBn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Timer unit: 1e-09 s\n","\n","# Total time: 39.0747 s\n","# File: <ipython-input-19-b1bc049bcd0c>\n","# Function: get_word_reviews_count at line 1\n","\n","# Line #      Hits         Time  Per Hit   % Time  Line Contents\n","# ==============================================================\n","#      1                                           def get_word_reviews_count(df):\n","#      2         1       1523.0   1523.0      0.0      word_reviews = {}\n","#      3    126679 10471659612.0  82662.9     26.8      for _, row in df.dropna(subset=['review']).iterrows():\n","#      4    126679 2150447473.0  16975.6      5.5          recipe_id, review = row['recipe_id'], row['review']\n","#      5    126679  569696017.0   4497.2      1.5          words = review.split(' ')\n","#      6   6792010 1272930803.0    187.4      3.3          for word in words:\n","#      7   6617066 2754623042.0    416.3      7.0              if word not in word_reviews:\n","#      8    174944   80337488.0    459.2      0.2                  word_reviews[word] = []\n","#      9   6792010 3368433200.0    495.9      8.6              word_reviews[word].append(recipe_id)\n","#     10                                               \n","#     11         1        235.0    235.0      0.0      word_reviews_count = {}\n","#     12    126679 9981284152.0  78791.9     25.5      for _, row in df.dropna(subset=['review']).iterrows():\n","#     13    126679 1264016995.0   9978.1      3.2          review = row['review']\n","#     14    126679  560602367.0   4425.4      1.4          words = review.split(' ')\n","#     15   6792010 1348423733.0    198.5      3.5          for word in words:\n","#     16   6792010 5252240394.0    773.3     13.4              word_reviews_count[word] = len(word_reviews[word])\n","#     17         1        244.0    244.0      0.0      return word_reviews_count"],"metadata":{"id":"vTAZ58GDBWCi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"-tcRHTRLBrRF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_word_reviews_count_optimized(df):\n","    \n","    word_reviews = {}\n","    \n","    #Удаляем нулевые и проходим идерацией\n","    for _, row in df.dropna(subset=['review']).iterrows():\n","\n","        #По каждому слову начинаем цикл\n","        for word in row['review'].split(' '):\n","            #Если слово не в словаре, то заносим его\n","            if word not in word_reviews:\n","                word_reviews[word] = 0\n","            #Добавляем рецепт по этому слову\n","            word_reviews[word] += 1\n","    \n","    return word_reviews"],"metadata":{"id":"F7gFQOA7BrNl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["%timeit get_word_reviews_count_optimized(reviews)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tm8MUfhwBrKy","executionInfo":{"status":"ok","timestamp":1671615244982,"user_tz":-180,"elapsed":71793,"user":{"displayName":"Валерия Южева","userId":"02946108047994320757"}},"outputId":"93bc672c-23c6-4f83-9cad-28eb93e61c8b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["8.92 s ± 416 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n"]}]},{"cell_type":"markdown","metadata":{"id":"x_wgYQHhFtHO"},"source":["4. Напишите несколько версий функции `MAPE` (см. [MAPE](https://en.wikipedia.org/wiki/Mean_absolute_percentage_error)) для расчета среднего абсолютного процентного отклонения значения рейтинга отзыва на рецепт от среднего значения рейтинга по всем отзывам для этого рецепта. \n","    1. Без использования векторизованных операций и методов массивов `numpy` и без использования `numba`\n","    2. Без использования векторизованных операций и методов массивов `numpy`, но с использованием `numba`\n","    3. С использованием векторизованных операций и методов массивов `numpy`, но без использования `numba`\n","    4. C использованием векторизованных операций и методов массивов `numpy` и `numba`\n","    \n","Измерьте время выполнения каждой из реализаций.\n","\n","Замечание: удалите из выборки отзывы с нулевым рейтингом.\n"]},{"cell_type":"code","source":["buffer = reviews[['recipe_id', 'rating']].dropna()\n","mask = buffer['rating'] != 0\n","buffer = buffer[mask].groupby(buffer['recipe_id'])['rating']"],"metadata":{"id":"slOQpC76CYFX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Удаление из выборки отзывов с нулевым рейтингом"],"metadata":{"id":"67mYGxniCYBy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def executor(series_data, function):\n","    \"\"\"Метод для вызова функции c аргументами\"\"\"\n","    return function(series_data.to_numpy(), series_data.mean())"],"metadata":{"id":"NCSjOR3gCX-6"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0ThQClWoFtHP"},"outputs":[],"source":["def MAPE_FIRST(A, F):\n","    results_list = [abs(i - F) / i for i in A]\n","    return 100/len(A) * sum(results_list)\n","\n","#Конвертация dataframe в series\n","result1 = buffer.agg(executor, MAPE_FIRST)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"enf9CPABFtHP","executionInfo":{"status":"ok","timestamp":1671615386841,"user_tz":-180,"elapsed":21823,"user":{"displayName":"Валерия Южева","userId":"02946108047994320757"}},"outputId":"b4d5bc2a-bbe2-4a89-8a35-dfb433a8242b"},"outputs":[{"output_type":"stream","name":"stdout","text":["2.64 s ± 358 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n"]}],"source":["%timeit buffer.agg(executor, MAPE_FIRST)"]},{"cell_type":"code","source":["@numba.jit(nopython=True)\n","def MAPE_SECOND(A, F):\n","    results_list = [abs(i - F) / i for i in A]\n","    return 100/len(A) * sum(results_list)\n","\n","result2 = buffer.agg(executor, MAPE_SECOND)"],"metadata":{"id":"KNwzRh5gChtW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["%timeit buffer.agg(executor, MAPE_SECOND)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vKkFJSlqCm4D","executionInfo":{"status":"ok","timestamp":1671615475327,"user_tz":-180,"elapsed":19284,"user":{"displayName":"Валерия Южева","userId":"02946108047994320757"}},"outputId":"55b58da8-a6dc-4ab2-a374-af3e69429a4f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2.34 s ± 26.3 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n"]}]},{"cell_type":"code","source":["np.allclose(result1, result2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cjo_cnHDCmsw","executionInfo":{"status":"ok","timestamp":1671615478376,"user_tz":-180,"elapsed":303,"user":{"displayName":"Валерия Южева","userId":"02946108047994320757"}},"outputId":"6a7f31f9-8372-416b-f44e-a59b64421b67"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":33}]},{"cell_type":"markdown","metadata":{"id":"idwKRbzAFtHQ"},"source":["#### [версия 2]\n","* Уточнены формулировки задач 1, 3, 4"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YPz9e2CXFtHR"},"outputs":[],"source":[]}]}